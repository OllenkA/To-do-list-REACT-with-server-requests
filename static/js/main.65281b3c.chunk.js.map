{"version":3,"sources":["components/MainPage/MainPage.module.css","components/TodoList structure/Task/TodoListTask.module.css","components/ReduxApp/ReduxApp.module.css","components/AddNewItemForm/AddNewItemForm.module.css","components/TodoList structure/Footer/TodoListFooter.module.css","components/TodoList structure/Title/delete-button.svg","components/TodoList structure/Title/TodoListTitle.module.css","components/ReduxTodoList/ReduxTodoList.module.css","components/TodoList structure/Tasks/TodoListTasks.module.css","components/ReduxApp/back-navigational-arrow-button-pointing-to-left-svgrepo-com.svg","serviceWorker.js","api.js","redux/reducer.js","redux/store.js","components/MainPage/MainPage.jsx","components/AddNewItemForm/AddNewItemForm.jsx","components/TodoList structure/Title/TodoListTitle.jsx","components/TodoList structure/Task/TodoListTask.jsx","components/TodoList structure/Tasks/TodoListTasks.jsx","components/TodoList structure/Footer/TodoListFooter.jsx","components/ReduxTodoList/ReduxTodoListView.jsx","components/ReduxTodoList/ReduxTodoList.jsx","components/ReduxApp/ReduxAppView.jsx","components/ReduxApp/ReduxApp.js","App.js","index.js"],"names":["module","exports","container","particles","text","main","it","but","check","task","activeTask","priority","delImg","taskTitle","wrapper","start","nav","back","motivation","title","form","error","lot","footer","filterActive","__webpack_require__","p","titleGoal","del","todoList","nameGoal","allTasks","Boolean","window","location","hostname","match","instance","axios","baseURL","withCredentials","headers","API-KEY","todolistAPI","get","todolistId","concat","put","post","delete","taskId","initialState","tasks","todolists","isTaskClear","addTaskAC","type","addTodolistAC","todolist","deleteTaskAC","deleteTodolistAC","setTodolistsAC","setTasksAC","updateTaskAC","reducer","state","arguments","length","undefined","action","newTodolists","Object","toConsumableArray","objectSpread","newTasks","map","el","id","newTasksArray","newArrayTasks","filter","newTodolistsArray","store","createStore","applyMiddleware","thunkMiddleware","MainPage","props","react_default","a","createElement","className","styles","particles_default","params","number","value","density","enable","size","random","move","direction","out_mode","line_linked","interactivity","events","onclick","mode","modes","remove","particles_nb","react_router_dom","to","AddNewItemForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTitleChange","e","setState","currentTarget","onAddItemClick","newText","addItem","onDeleteItemClick","onAddItemEnter","key","render","errorClass","onKeyPress","maxLength","onChange","placeholder","goal","onClick","newTaskTitleRef","React","createRef","Component","TodoListTitle","src","deleteImg","alt","deleteTodolist","TodoListTask","onIsDoneChanged","checked","onTaskStatusChanged","onTitleChanged","newTitle","editMode","activateEditMode","deactivateEditMode","changeTitle","deleteTask","status","onBlur","autoFocus","TodoListTasks","tasksElements","Task_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","onFilterChanged","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","ReduxTodoListView","Title_TodoListTitle","assign","components_AddNewItemForm_AddNewItemForm","addTask","Tasks_TodoListTasks","t","Footer_TodoListFooter","ReduxTodoList","restoreState","getTasks","newFilterValue","changeTask","obj","find","item","newTask","updateTask","ReduxTodoList_ReduxTodoListView","isFetching","clearTasks","connect","dispatch","then","res","data","items","getTasksTC","addTaskTC","deleteTaskTC","getState","deleteTodolistTC","resultCode","changeTaskTC","ReduxAppView","addTodolist","tl","components_ReduxTodoList_ReduxTodoList","todoListId","ReduxApp","getTodolists","ReduxApp_ReduxAppView","addTodolistTC","App","Fragment","react_router","exact","path","components_MainPage_MainPage","components_ReduxApp_ReduxApp","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65281b3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainPage_container__3hR0Z\",\"particles\":\"MainPage_particles__1NkSn\",\"text\":\"MainPage_text__7FMP3\",\"main\":\"MainPage_main__2kosF\",\"it\":\"MainPage_it__1jHFr\",\"but\":\"MainPage_but__2Yr1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"check\":\"TodoListTask_check__2l39I\",\"task\":\"TodoListTask_task__APEq0\",\"activeTask\":\"TodoListTask_activeTask__20hHx\",\"text\":\"TodoListTask_text__2FIY8\",\"priority\":\"TodoListTask_priority__1uyuM\",\"delImg\":\"TodoListTask_delImg__7v8Ou\",\"taskTitle\":\"TodoListTask_taskTitle__2ImLy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ReduxApp_container__H_XaG\",\"wrapper\":\"ReduxApp_wrapper__1rGGm\",\"start\":\"ReduxApp_start__uRSdi\",\"nav\":\"ReduxApp_nav__1XwW6\",\"back\":\"ReduxApp_back__3Vcci\",\"motivation\":\"ReduxApp_motivation__3ek3G\",\"title\":\"ReduxApp_title__2VhlJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddNewItemForm_form__kp7_6\",\"but\":\"AddNewItemForm_but__1Fqa6\",\"error\":\"AddNewItemForm_error__2cN4X\",\"lot\":\"AddNewItemForm_lot__lU8_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"TodoListFooter_footer__oGz9w\",\"filterActive\":\"TodoListFooter_filterActive__3RvCs\"};","module.exports = __webpack_public_path__ + \"static/media/delete-button.d4798137.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleGoal\":\"TodoListTitle_titleGoal__Yt1mF\",\"del\":\"TodoListTitle_del__39o9k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"ReduxTodoList_todoList__150Ee\",\"nameGoal\":\"ReduxTodoList_nameGoal__xxCvJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTasks\":\"TodoListTasks_allTasks__1U5Ue\"};","module.exports = __webpack_public_path__ + \"static/media/back-navigational-arrow-button-pointing-to-left-svgrepo-com.fec27d6e.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers:  {'API-KEY': '385bff6a-3ed2-44f8-99e7-e1f4af74d717'}\r\n});\r\n\r\n// const _getTasksQueue = [];\r\n// setInterval( () => {\r\n//     if (_getTasksQueue.length > 0) {\r\n//         let firstItem = _getTasksQueue.shift();\r\n//         //firstItem.resolve();\r\n//         instance.get(`todo-lists/${firstItem.todolistId}/tasks`)\r\n//             .then(res => {\r\n//                 firstItem.resolve(res);\r\n//             });\r\n//     }\r\n\r\n// }, 2000);\r\n\r\nexport const todolistAPI = {\r\n    // createTodolist(todolistTitle) {\r\n    //     return instance.post('todo-lists', {todolistTitle});\r\n    // },\r\n    getTodolists() {\r\n        return instance.get('todo-lists');\r\n    },\r\n    // getTasks(todolistId) {\r\n    //     let promise = new Promise( (resolve) => {\r\n    //         let item = {\r\n    //             resolve: resolve,\r\n    //             todolistId: todolistId\r\n    //         };\r\n    //         _getTasksQueue.push(item);\r\n    //     } );\r\n    //     // put to queue\r\n    //     // return instance.get(`todo-lists/${todolistId}/tasks`);\r\n    //     return promise;\r\n    // },\r\n    getTasks(todolistId) {\r\n        return instance.get(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    //... methods for tasks\r\n    updateTask(task) {\r\n        return instance.put('todo-lists/tasks', task);\r\n    },\r\n    addTodolist(title) {\r\n        return instance.post('todo-lists', {title});\r\n    },\r\n    addTask(todolistId, title) {\r\n       return instance.post(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    deleteTodolist(todolistId) {\r\n        return instance.delete(`todo-lists/${todolistId}`);\r\n    },\r\n    deleteTask(taskId) {\r\n        return instance.delete(`todo-lists/tasks/${taskId}`);\r\n    }\r\n };\r\n\r\n\r\nexport default instance;","import {todolistAPI} from \"../api\";\r\n\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST';\r\nexport const SET_TODOLISTS = 'SET-TODOLISTS';\r\nexport const SET_TASKS = 'SET-TASKS';\r\nexport const UPDATE_TASK = 'UPDATE-TASK';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TODOLIST = 'DELETE-TODOLIST';\r\nexport const DELETE_TASK = 'DELETE-TASK';\r\nexport const CLEAR_TASK = 'CLEAR-TASK'\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    todolists: [],\r\n    isTaskClear: false\r\n};\r\n\r\nexport const getTasksTC = (todolistId) => (dispatch) => {\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items));\r\n        });\r\n};\r\n\r\nexport const getTodolistsTC = () => (dispatch) => {\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        });\r\n};\r\n\r\nexport const addTodolistTC = (title) => (dispatch) => {\r\n    todolistAPI.addTodolist(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        });\r\n};\r\n\r\nexport const addTaskTC = (todolistId, newText) => (dispatch) => {\r\n    todolistAPI.addTask(todolistId, newText)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        });\r\n};\r\n\r\nexport const deleteTaskTC = (taskId) => (dispatch) => {\r\n    todolistAPI.deleteTask(taskId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId))\r\n        })\r\n\r\n};\r\n\r\nexport const deleteTodolistTC = (todolistId) => (dispatch, getState) => {\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTodolistAC(todolistId))\r\n        })\r\n\r\n};\r\n\r\nexport const changeTaskTC = (newTask) => (dispatch, getState) => {\r\n    todolistAPI.updateTask(newTask)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(newTask))\r\n            }\r\n        })\r\n\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            let newTodolists = [action.todolist, ...state.todolists];\r\n            return {\r\n                ...state,\r\n                todolists: newTodolists\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists\r\n            };\r\n        case SET_TASKS:\r\n            debugger\r\n            if(state.isTaskClear) {\r\n                return {\r\n                    ...state,\r\n                    tasks: action.tasks,\r\n                    isTaskClear: false\r\n                };\r\n            } else  {\r\n                return {\r\n                    ...state,\r\n                    tasks: [...action.tasks, ...state.tasks]\r\n                };\r\n            }\r\n\r\n        case UPDATE_TASK:\r\n            let newTasks = state.tasks.map(el => {\r\n                if (el.id === action.task.id) {\r\n                    return action.task\r\n                } else {\r\n                    return el\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                tasks: newTasks\r\n            };\r\n        case ADD_TASK:\r\n            let newTasksArray = [\r\n                action.task,\r\n                ...state.tasks];\r\n            return {\r\n                ...state,\r\n                tasks: newTasksArray\r\n            };\r\n        case DELETE_TASK:\r\n            let newArrayTasks = state.tasks.filter(el => {\r\n                return el.id !== action.taskId\r\n            });\r\n            return {\r\n                ...state,\r\n                tasks: newArrayTasks\r\n            };\r\n        case DELETE_TODOLIST:\r\n            let newTodolistsArray = state.todolists.filter(el => {\r\n                return el.id !== action.todolistId\r\n            });\r\n            return {\r\n                ...state,\r\n                todolists: newTodolistsArray\r\n            };\r\n\r\n        case CLEAR_TASK:\r\n            return {\r\n                ...state,\r\n                isTaskClear: true\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport const addTaskAC = (task) => ({type: ADD_TASK, task});\r\n\r\nexport const addTodolistAC = (todolist) => ({type: ADD_TODOLIST, todolist});\r\n\r\nexport const deleteTaskAC = (taskId) => ({type: DELETE_TASK, taskId});\r\n\r\nexport const deleteTodolistAC = (todolistId) => ({type: DELETE_TODOLIST, todolistId});\r\n\r\nexport const setTodolistsAC = (todolists) => ({type: SET_TODOLISTS, todolists: todolists});\r\n\r\nexport const setTasksAC = (tasks) => ({type: SET_TASKS, tasks: tasks});\r\n\r\nexport const updateTaskAC = (task) => ({type: UPDATE_TASK, task: task});\r\n\r\nexport const clearTasksTC = () => ({type: CLEAR_TASK})\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport styles from './MainPage.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Particles from \"react-particles-js\";\r\n\r\n\r\nconst MainPage = (props) => {\r\n    const part = {\r\n        \"particles\": {\r\n            \"number\": {\r\n                \"value\": 160,\r\n                \"density\": {\r\n                    \"enable\": false\r\n                }\r\n            },\r\n            \"size\": {\r\n                \"value\": 10,\r\n                \"random\": true\r\n            },\r\n            \"move\": {\r\n                \"direction\": \"bottom\",\r\n                \"out_mode\": \"out\"\r\n            },\r\n            \"line_linked\": {\r\n                \"enable\": false\r\n            }\r\n        },\r\n        \"interactivity\": {\r\n            \"events\": {\r\n\r\n                \"onclick\": {\r\n\r\n                    \"enable\": true,\r\n\r\n                    \"mode\": \"remove\"\r\n\r\n                }\r\n            },\r\n            \"modes\": {\r\n                \"remove\": {\r\n                    \"particles_nb\": 10\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Particles className={styles.particles} params={part}/>\r\n            <div className={styles.text}>\r\n                <h2 className={styles.main}>DREAM</h2>\r\n                <p className={styles.it}>--- IT ---</p>\r\n                <h2 className={styles.main}>WISH</h2>\r\n                <p className={styles.it}>--- IT ---</p>\r\n                <h2 className={styles.main}>DO</h2>\r\n                <p className={styles.it}>--- IT ---</p>\r\n            </div>\r\n            <NavLink to='/mySchedule'>\r\n                <button className={styles.but}>RUN TO YOUR DREAMS</button>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\n// import '../../App.css';\r\nimport styles from './AddNewItemForm.module.css';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.newTaskTitleRef = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        error: false,\r\n        title: '',\r\n    };\r\n\r\n    onTitleChange = (e) => {\r\n        this.setState(\r\n            {\r\n                error: false,\r\n                title: e.currentTarget.value\r\n            }\r\n        )\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n\r\n        if (newText === '') {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false});\r\n            this.props.addItem(newText);\r\n            this.setState({title: ''})\r\n        }\r\n\r\n    };\r\n\r\n    onDeleteItemClick = () => {\r\n        // this.props.deleteTodolist(this.props.id);\r\n        this.setState({title: ''})\r\n\r\n\r\n    };\r\n\r\n    onAddItemEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddItemClick()\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let errorClass = this.state.error ? styles.error : styles.lot;\r\n\r\n        return (\r\n            <div className={styles.form}>\r\n                <input onKeyPress={this.onAddItemEnter}\r\n                       maxLength=\"60\"\r\n                       onChange={this.onTitleChange}\r\n                       className={errorClass}\r\n                       type=\"text\" placeholder={this.props.goal}\r\n                       value={this.state.title}/>\r\n                <button className={styles.but} onClick={this.onAddItemClick}>Add{this.props.text}</button>\r\n                <button className={styles.but} onClick={this.onDeleteItemClick}>Clear input window</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import React from 'react';\r\nimport styles from './TodoListTitle.module.css';\r\nimport deleteImg from './delete-button.svg';\r\n\r\nconst TodoListTitle = (props) => {\r\n\r\n    let onDeleteItemClick = () => {\r\n        props.deleteTodolist(props.id);\r\n    };\r\n\r\n    return <header>\r\n        <img className={styles.del} src={deleteImg} alt='' onClick={onDeleteItemClick}/>\r\n        <h3 className={styles.titleGoal}>{props.title}</h3>\r\n    </header>\r\n};\r\n\r\nexport default TodoListTitle;        ","import React from 'react';\r\nimport styles from \"./TodoListTask.module.css\";\r\nimport deleteImg from '../Title/delete-button.svg';\r\n\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let check = e.currentTarget.checked ? 2 : 0;\r\n        this.props.onTaskStatusChanged(this.props.task.id, check);\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({newTitle: e.currentTarget.value})\r\n    };\r\n\r\n    state = {\r\n        editMode: false,\r\n        newTitle: this.props.task.title,\r\n    };\r\n\r\n    priority = ['Low', 'Middle', 'High', 'Urgently', 'Later'];\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.newTitle);\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n    onDeleteItemClick = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={(this.props.task.status === 2) ? styles.activeTask: styles.task}>\r\n                <input className={styles.check}\r\n                       type=\"checkbox\" checked={this.props.task.status === 2}\r\n                       onChange={this.onIsDoneChanged}/>\r\n                <div className={styles.text}>\r\n                    {this.state.editMode\r\n                        ? <input onBlur={this.deactivateEditMode}\r\n                                 autoFocus={true} value={this.state.newTitle}\r\n                                 onChange={this.onTitleChanged}/>\r\n                        : <span className={styles.taskTitle} onClick={this.activateEditMode}><b>{\r\n                            this.props.task.title}</b>\r\n                    </span>}\r\n                    <i className={styles.priority}>Priority:{this.priority[this.props.task.priority]}</i>\r\n                </div>\r\n                <img src={deleteImg} alt='' onClick={this.onDeleteItemClick} className={styles.delImg}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport styles from './TodoListTasks.module.css';\r\nimport TodoListTask from '../Task/TodoListTask';\r\n\r\nconst TodoListTasks = (props) => {\r\n\r\n    let tasksElements = props.tasks.map(task =>\r\n        <TodoListTask key={task.id} task={task}\r\n                      onTaskStatusChanged={props.onTaskStatusChanged}\r\n                      changeTitle={props.changeTitle}\r\n                      deleteTask={props.deleteTask}\r\n        />);\r\n\r\n    return <div className={styles.allTasks}>\r\n        {tasksElements}\r\n    </div>\r\n};\r\n\r\nexport default TodoListTasks;\r\n\r\n","import React from 'react';\r\nimport styles from \"./TodoListFooter.module.css\"\r\n\r\nclass TodoListFooter extends React.Component {\r\n    state = {\r\n        isHidden: true\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.onFilterChanged('All')\r\n    };\r\n    onCompletedFilterClick = () => {\r\n        this.props.onFilterChanged('Completed')\r\n    };\r\n    onActiveFilterClick = () => {\r\n        this.props.onFilterChanged('Active')\r\n    };\r\n    onShowFiltersClick = () => {\r\n        this.setState({isHidden: true})\r\n    };\r\n    onHideFiltersClick = () => {\r\n        this.setState({isHidden: false})\r\n    };\r\n\r\n    render = (props) => {\r\n\r\n        let classForAll = this.props.filterValue === 'All'? styles.filterActive: '';\r\n        let classForCompleted = this.props.filterValue === 'Completed'? styles.filterActive: '';\r\n        let classForActive = this.props.filterValue === 'Active'? styles.filterActive: '';\r\n\r\n        return (\r\n            <footer className={styles.footer}>\r\n                {this.state.isHidden && <div>\r\n                    <button onClick={this.onAllFilterClick} className={classForAll}>\r\n                        Show all tasks\r\n                    </button>\r\n\r\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>\r\n                        Show completed tasks\r\n                    </button>\r\n\r\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>\r\n                        Show active tasks\r\n                    </button>\r\n                </div>}\r\n\r\n                {!this.state.isHidden &&\r\n                <button onClick={this.onShowFiltersClick} className={classForActive}>\r\n                    Show all buttons\r\n                </button>}\r\n                {this.state.isHidden &&\r\n                <button onClick={this.onHideFiltersClick} className={classForActive}>\r\n                    Hide all buttons\r\n                </button>}\r\n\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React from 'react';\r\nimport TodoListTitle from '../TodoList structure/Title/TodoListTitle';\r\nimport AddNewItemForm from '../AddNewItemForm/AddNewItemForm';\r\nimport TodoListTasks from '../TodoList structure/Tasks/TodoListTasks';\r\nimport TodoListFooter from '../TodoList structure/Footer/TodoListFooter';\r\n// import preloader from '../../preloader.svg';\r\nimport styles from './ReduxTodoList.module.css'\r\n\r\nconst ReduxTodoListView = (props) => {\r\n    return <div className={styles.todoList}>\r\n        <div className={styles.nameGoal}>\r\n            <TodoListTitle title={props.title}\r\n                           {...props}\r\n                           deleteTodolist={props.deleteTodolist}/>\r\n            <AddNewItemForm {...props} goal={'Set tasks for your goal..!'} text={' task'}\r\n                            addItem={props.addTask}/>\r\n        </div>\r\n        <TodoListTasks onTaskStatusChanged={props.onTaskStatusChanged}\r\n                       changeTitle={props.changeTitle}\r\n                       deleteTask={props.deleteTask}\r\n                       tasks={props.tasks.filter(t => {\r\n                               if (props.filterValue === 'All') {\r\n                                   return true;\r\n                               }\r\n                               if (props.filterValue === 'Active') {\r\n                                   return t.status === 0\r\n                               }\r\n                               if (props.filterValue === 'Completed') {\r\n                                   return t.status === 2\r\n                               }\r\n                               return null\r\n                           }\r\n                       )\r\n                       }\r\n        />\r\n        {/*<img src={preloader} alt=''/>*/}\r\n\r\n\r\n        <TodoListFooter onFilterChanged={props.onFilterChanged} filterValue={props.filterValue}/>\r\n    </div>\r\n};\r\n\r\n\r\nexport default ReduxTodoListView;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addTaskTC, deleteTaskTC, deleteTodolistTC, changeTaskTC, getTasksTC, clearTasksTC} from '../../redux/reducer';\r\nimport ReduxTodoListView from \"./ReduxTodoListView\";\r\n\r\nclass ReduxTodoList extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     // this.newTasksTitleRef = React.createRef();\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    state = {\r\n        filterValue: 'All',\r\n        // isFetching: true,\r\n    };\r\n\r\n    // saveState = () => {\r\n    //     let stateAsString = JSON.stringify(this.state);\r\n    //     localStorage.setItem('our-state-' + this.props.id, stateAsString);\r\n    // };\r\n\r\n    restoreState = () => {\r\n        this.props.getTasks(this.props.id);\r\n    };\r\n\r\n    addTask = (newText) => {\r\n        this.props.addTask(this.props.id, newText)\r\n    };\r\n\r\n    deleteTodolist = (todolistId) => {\r\n        this.props.deleteTodolist(todolistId);\r\n    };\r\n\r\n    deleteTask = (taskId) => {\r\n        this.props.deleteTask(taskId)\r\n    };\r\n\r\n    onFilterChanged = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        });\r\n    };\r\n\r\n    changeTask = (taskId, obj) => {\r\n        let task = this.props.tasks.find((item) => {\r\n            return item.id === taskId\r\n        });\r\n\r\n        let newTask = {...task, ...obj};\r\n        this.props.updateTask(newTask)\r\n    };\r\n\r\n    onTaskStatusChanged = (taskId, status) => {\r\n        this.changeTask(taskId, {status});\r\n    };\r\n\r\n    changeTitle = (taskId, title) => {\r\n        this.changeTask(taskId, {title: title});\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearTasks();\r\n    }\r\n\r\n    render = () => {\r\n        return <ReduxTodoListView {...this.props}\r\n                                  deleteTodolist={this.deleteTodolist}\r\n                                  deleteTask={this.deleteTask}\r\n                                  addTask={this.addTask}\r\n                                  filterValue={this.state.filterValue}\r\n                                  isFetching={this.state.isFetching}\r\n                                  onTaskStatusChanged={this.onTaskStatusChanged}\r\n                                  changeTitle={this.changeTitle}\r\n                                  onFilterChanged={this.onFilterChanged}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({});\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getTasks: (todolistId) => {\r\n            dispatch(getTasksTC(todolistId))\r\n        },\r\n        addTask: (todolistId, newText) => {\r\n            dispatch(addTaskTC(todolistId, newText));\r\n        },\r\n        deleteTask: (taskId) => {\r\n            dispatch(deleteTaskTC(taskId));\r\n        },\r\n        deleteTodolist: (todolistId) => {\r\n            dispatch(deleteTodolistTC(todolistId));\r\n        },\r\n        updateTask: (newTask) => {\r\n            dispatch(changeTaskTC(newTask));\r\n        },\r\n        clearTasks: () => {\r\n            dispatch(clearTasksTC());\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxTodoList);","import React from 'react';\r\nimport AddNewItemForm from '../AddNewItemForm/AddNewItemForm';\r\nimport ReduxTodoList from '../ReduxTodoList/ReduxTodoList';\r\nimport styles from './ReduxApp.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport back from './back-navigational-arrow-button-pointing-to-left-svgrepo-com.svg';\r\n\r\n\r\nconst ReduxAppView = (props) => {\r\n\r\n    return <header className={styles.container}>\r\n        <NavLink to='/' className={styles.nav}>\r\n            <img className={styles.back} src={back} alt=''/>\r\n        </NavLink>\r\n\r\n        <h1 className={styles.title}>MY GOALS</h1>\r\n        <blockquote className={styles.motivation}>SET A GOAL AND DEFINE A TASK TO ACHIEVE IT</blockquote>\r\n        <AddNewItemForm addItem={props.addTodolist} goal={'SET GOAL...max 60 symbols'} text={' goal'}/>\r\n\r\n        <div className={styles.wrapper}>\r\n        {props.todolists.map(tl => {\r\n            return <ReduxTodoList key={tl.id} id={tl.id} title={tl.title}\r\n                                  tasks = {props.tasks.filter(t => t.todoListId === tl.id)} />\r\n        })}\r\n        </div>\r\n    </header>\r\n};\r\n\r\nexport default ReduxAppView;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getTodolistsTC, addTodolistTC} from '../../redux/reducer';\r\nimport ReduxAppView from \"./ReduxAppView\";\r\n\r\nclass ReduxApp extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getTodolists()\r\n    }\r\n\r\n    addTodolist = (title) => {\r\n        this.props.addTodolist(title)\r\n    };\r\n\r\n    render() {\r\n        return <ReduxAppView {...this.props} addTodolist={this.addTodolist}/>\r\n\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        todolists: state.todolists\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getTodolists: () => {\r\n            dispatch(getTodolistsTC());\r\n        },\r\n        addTodolist: (title) => {\r\n            dispatch(addTodolistTC(title));\r\n        },\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxApp);","import React from 'react';\r\n// import MainPage from \"../MainPage/MainPage\";\r\nimport {Route} from \"react-router-dom\";\r\nimport MainPage from \"./components/MainPage/MainPage\";\r\nimport ReduxApp from \"./components/ReduxApp/ReduxApp\";\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return <>\r\n            <Route exact path='/' render={() => <MainPage/>}/>\r\n            <Route path='/mySchedule'\r\n                   render={() => <ReduxApp {...this.props} addTodolist={this.addTodolist}/>}/>\r\n        </>\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}